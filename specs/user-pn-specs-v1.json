{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Pikabu-Nightmare server.",
    "version": "1.0.0",
    "title": "Swagger Pikabu Nightmare",
    "termsOfService": "http://pn.local/terms",
    "contact": {
      "email": "qwe@qwe.qwe"
    },
    "license": {
      "name": "GPL-3.0-only",
      "url": "https://spdx.org/licenses/GPL-3.0-only.html"
    }
  },
  "host": "auth.service.pn.local",
  "basePath": "/back",
  "tags": [
    {
      "name": "user",
      "description": "Register and authenticate users"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "operationId": "registerUser",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User that needs to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/verifyEmail/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verify user Email",
        "operationId": "verifyEmail",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "description": "Username whose Email verified",
            "required": true
          },
          {
            "in": "query",
            "name": "secret",
            "type": "string",
            "description": "Secret param",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/u/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updUser",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "short_info",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "avatar",
            "type": "file",
            "required": false,
            "description": "Avatar image file (jpg/png)"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "pn_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://auth.service.pn.local/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:posts": "add posts",
        "read:posts": "read posts"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "RegUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "reg_date": {
          "type": "string",
          "format": "date"
        },
        "short_info": {
          "type": "string"
        },
        "avatar": {
          "type": "string",
          "description": "Image url"
        }
      }
    }
  }
}
